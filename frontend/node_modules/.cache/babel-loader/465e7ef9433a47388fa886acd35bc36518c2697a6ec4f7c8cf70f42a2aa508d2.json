{"ast":null,"code":"import{BarChart,Bar,XAxis,YAxis,CartesianGrid,Tooltip,ResponsiveContainer}from'recharts';import React,{useState,useEffect}from'react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function HistogramChart(_ref){let{dataKey}=_ref;const[data,setData]=useState([]);useEffect(()=>{async function fetchData(){try{const response=await fetch('http://127.0.0.1:5000/hsr_character_stats/1212');const rawData=await response.json();// Group ATK values into increments of 10 and count frequency within each group\nconst groupedData=rawData.reduce((accumulator,item)=>{let roundedNum=Math.round(item[dataKey]/100)*100;// Round to nearest 100\nif(dataKey===\"SPD\"){roundedNum=Math.round(item[dataKey]/5)*5;// Rounded to nearest 5\n}else if(dataKey===\"CR\"||dataKey===\"CD\"){roundedNum=Math.round(item[dataKey]/0.01);// Rounded to nearest 5\n}accumulator[roundedNum]=(accumulator[roundedNum]||0)+1;// Count frequency\nreturn accumulator;},{});// Convert grouped data to array of objects for Recharts\nconst chartData=Object.keys(groupedData).map(key=>({[dataKey]:parseInt(key),// Convert key back to number\nfrequency:groupedData[key]}));setData(chartData);}catch(error){console.error('Error fetching data:',error);}}fetchData();},[dataKey]);return/*#__PURE__*/_jsxs(\"div\",{className:\"w-3/4 mx-auto m-5 bg-black-t-50\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Histogram of Jingliu \",dataKey,\" Value\"]}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"50%\",children:/*#__PURE__*/_jsxs(BarChart,{data:data,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:dataKey,type:\"category\"// Set type to category for discrete x-axis values\n,domain:['auto','auto']// Set domain to auto to include all data points\n,tick:{fill:'#ffffff'}}),/*#__PURE__*/_jsx(YAxis,{tick:{fill:'#ffffff'}}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>[\"\".concat(value,\" times\"),'Frequency']}),/*#__PURE__*/_jsx(Bar,{dataKey:\"frequency\",fill:\"#8884d8\"})]})})]});}export default HistogramChart;","map":{"version":3,"names":["BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","HistogramChart","_ref","dataKey","data","setData","fetchData","response","fetch","rawData","json","groupedData","reduce","accumulator","item","roundedNum","Math","round","chartData","Object","keys","map","key","parseInt","frequency","error","console","className","children","width","height","margin","top","right","left","bottom","strokeDasharray","type","domain","tick","fill","formatter","value","concat"],"sources":["/home/marshwu/repos/hsr-stats/frontend/src/Components/Histogram.js"],"sourcesContent":["import { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer \n} from 'recharts';\nimport React, { useState, useEffect } from 'react';\n\nfunction HistogramChart( {dataKey} ) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/hsr_character_stats/1212');\n        const rawData = await response.json();\n        // Group ATK values into increments of 10 and count frequency within each group\n        const groupedData = rawData.reduce((accumulator, item) => {\n          let roundedNum = Math.round(item[dataKey] / 100) * 100; // Round to nearest 100\n          if (dataKey === \"SPD\") {\n            roundedNum = Math.round(item[dataKey] / 5) * 5; // Rounded to nearest 5\n          }\n          else if (dataKey === \"CR\" || dataKey === \"CD\") {\n            roundedNum = Math.round(item[dataKey] / 0.01); // Rounded to nearest 5\n          }\n          accumulator[roundedNum] = (accumulator[roundedNum] || 0) + 1; // Count frequency\n          return accumulator;\n        }, {});\n        // Convert grouped data to array of objects for Recharts\n        const chartData = Object.keys(groupedData).map(key => ({\n          [dataKey]: parseInt(key), // Convert key back to number\n          frequency: groupedData[key],\n        }));\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n\n    fetchData();\n  }, [dataKey]);\n\n  return (\n    <div className=\"w-3/4 mx-auto m-5 bg-black-t-50\">\n      <h1>Histogram of Jingliu { dataKey } Value</h1>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <BarChart\n          data={data}\n          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis \n            dataKey={ dataKey } \n            type=\"category\" // Set type to category for discrete x-axis values\n            domain={['auto', 'auto']} // Set domain to auto to include all data points\n            tick={{ fill: '#ffffff' }}\n          />\n          <YAxis \n            tick={{ fill: '#ffffff' }}\n          />\n          <Tooltip \n            formatter={(value) => [`${value} times`, 'Frequency']}\n          />\n          <Bar dataKey=\"frequency\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default HistogramChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}