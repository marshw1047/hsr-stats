{"ast":null,"code":"var _jsxFileName = \"/home/marshwu/repos/hsr-stats/frontend/src/Components/Histogram.js\",\n  _s = $RefreshSig$();\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HistogramChart({\n  dataKey\n}) {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/hsr_character_stats/1005');\n        const rawData = await response.json();\n        // Group ATK values into increments of 10 and count frequency within each group\n        const groupedData = rawData.reduce((accumulator, item) => {\n          const roundedNum = Math.round(item[dataKey] / 100) * 100; // Round to nearest 100\n          accumulator[roundedNum] = (accumulator[roundedNum] || 0) + 1; // Count frequency\n          return accumulator;\n        }, {});\n        // Convert grouped data to array of objects for Recharts\n        const chartData = Object.keys(groupedData).map(key => ({\n          [dataKey]: parseInt(key),\n          // Convert key back to number\n          frequency: groupedData[key]\n        }));\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-3/4 mx-auto m-5 bg-black-t-50\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Histogram of Kafka \", dataKey, \" Value\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"ATK\",\n          type: \"category\" // Set type to category for discrete x-axis values\n          ,\n          domain: ['auto', 'auto'] // Set domain to auto to include all data points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`${value} times`, 'Frequency']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"frequency\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(HistogramChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = HistogramChart;\nexport default HistogramChart;\nvar _c;\n$RefreshReg$(_c, \"HistogramChart\");","map":{"version":3,"names":["BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","React","useState","useEffect","jsxDEV","_jsxDEV","HistogramChart","dataKey","_s","data","setData","fetchData","response","fetch","rawData","json","groupedData","reduce","accumulator","item","roundedNum","Math","round","chartData","Object","keys","map","key","parseInt","frequency","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","type","domain","formatter","value","fill","_c","$RefreshReg$"],"sources":["/home/marshwu/repos/hsr-stats/frontend/src/Components/Histogram.js"],"sourcesContent":["import { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer \n} from 'recharts';\nimport React, { useState, useEffect } from 'react';\n\nfunction HistogramChart( {dataKey} ) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/hsr_character_stats/1005');\n        const rawData = await response.json();\n        // Group ATK values into increments of 10 and count frequency within each group\n        const groupedData = rawData.reduce((accumulator, item) => {\n          const roundedNum = Math.round(item[dataKey] / 100) * 100; // Round to nearest 100\n          accumulator[roundedNum] = (accumulator[roundedNum] || 0) + 1; // Count frequency\n          return accumulator;\n        }, {});\n        // Convert grouped data to array of objects for Recharts\n        const chartData = Object.keys(groupedData).map(key => ({\n          [dataKey]: parseInt(key), // Convert key back to number\n          frequency: groupedData[key],\n        }));\n        setData(chartData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"w-3/4 mx-auto m-5 bg-black-t-50\">\n      <h1>Histogram of Kafka { dataKey } Value</h1>\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart\n          data={data}\n          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis \n            dataKey=\"ATK\" \n            type=\"category\" // Set type to category for discrete x-axis values\n            domain={['auto', 'auto']} // Set domain to auto to include all data points\n          />\n          <YAxis />\n          <Tooltip \n            formatter={(value) => [`${value} times`, 'Frequency']}\n          />\n          <Bar dataKey=\"frequency\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default HistogramChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}